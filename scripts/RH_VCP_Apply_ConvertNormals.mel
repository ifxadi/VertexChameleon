//
// Vertex Chameleon Maya Plugin Source Code
// Copyright (C) 2007-2014 RenderHeads Ltd.
//
// This source is available for distribution and/or modification
// only under the terms of the MIT license.  All rights reserved.
//
// The source is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// FITNESS FOR A PARTICULAR PURPOSE. See the MIT license
// for more details.
//

global proc
VCP_Apply_ConvertNormals(int $isWorld)
{
	string $cmd = "RH_VertexPolyColour -op 500 ";

	if (`optionVar -query RH_VCP_Verbose` > 0)
		$cmd += " -verbose ";
	if (`optionVar -query RH_VCP_NoUndo`)
		$cmd += " -nun ";

	int $forceComponent = `optionVar -query RH_VCP_ComponentOverride`;
	if ($forceComponent > 1)
	{
		if ($forceComponent == 2)
			$cmd += " -forceComponent 1 ";
		if ($forceComponent == 3)
			$cmd += " -forceComponent 2 ";
	}

	$cmd += " -channelMask " + `optionVar -q RH_VCP_ChannelMask` + " ";

	if ($isWorld)
	{
		$cmd += " -space World ";
	}

	eval($cmd);
}


global proc
VCP_Apply_ConvertUVs()
{
	string $cmd = "RH_VertexPolyColour -op 503 ";

	if (`optionVar -query RH_VCP_Verbose` > 0)
		$cmd += " -verbose ";
	if (`optionVar -query RH_VCP_NoUndo`)
		$cmd += " -nun ";

	int $forceComponent = `optionVar -query RH_VCP_ComponentOverride`;
	if ($forceComponent > 1)
	{
		if ($forceComponent == 2)
			$cmd += " -forceComponent 1 ";
		if ($forceComponent == 3)
			$cmd += " -forceComponent 2 ";
	}

	$cmd += " -channelMask " + `optionVar -q RH_VCP_ChannelMask` + " ";

	eval($cmd);
}

proc
VCP_CreateFrame_ConvertNormals_Content()
{
	columnLayout -columnAlign "center" -adjustableColumn true -rowSpacing 4;
		button -label (VCP_uiRes("m_RH_VCP.kConvNorm_ApplyObject")) -command "VCP_Apply_ConvertNormals(0);";
		button -label (VCP_uiRes("m_RH_VCP.kConvNorm_ApplyWorld")) -command "VCP_Apply_ConvertNormals(1);";
		//button -label (VCP_uiRes("m_RH_VCP.kConvNorm_ApplyWorld")) -command "VCP_Apply_ConvertUVs();";
	setParent ..;
}

global proc
VCP_CreateFrame_ConvertNormals(int $hasFrame)
{
	if ($hasFrame)
	{
		int $frameCollapse = `optionVar -query "RH_VCP_FrameConvertNormals"`;
		$frame = `frameLayout -label (VCP_uiRes("m_RH_VCP.kConvNorm_FrameTitle"))
					-labelIndent 4
					-borderStyle "etchedIn"
					-collapsable true
					-collapse $frameCollapse
					-marginWidth 4
					-marginHeight 4`;
			VCP_CreateFrame_ConvertNormals_Content();
		setParent ..;

		frameLayout	-e -collapseCommand "optionVar -intValue RH_VCP_FrameConvertNormals 1" $frame;
		frameLayout	-e -expandCommand "optionVar -intValue RH_VCP_FrameConvertNormals 0" $frame;
	}
	else
	{
		$frame = `frameLayout
					-labelVisible false
					-borderStyle "etchedIn"
					-collapsable false
					-marginWidth 4
					-marginHeight 4`;
			VCP_CreateFrame_ConvertNormals_Content();
		setParent ..;
	}
}